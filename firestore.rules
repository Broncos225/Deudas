/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data. Each user has their own private data tree under `/users/{userId}`.
 *
 * Data Structure:
 * - /users/{userId}/debtors/{debtorId}: Stores debtor information, accessible only by the owning user.
 * - /users/{userId}/debts/{debtId}: Stores debt records, accessible only by the owning user.
 * - /users/{userId}/settlements/{settlementId}: Stores settlement history, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User data is completely isolated; one user cannot access another user's data.
 * - Listing of user subcollections is allowed only for the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} - True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} - True if the request is made by the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/debtors/{debtorId} collection.
     * @path /users/{userId}/debtors/{debtorId}
     * @allow (create) User 'A' can create a debtor under their own user ID.
     * @deny (create) User 'A' cannot create a debtor under User 'B's user ID.
     * @allow (get) User 'A' can read a debtor under their own user ID.
     * @deny (get) User 'A' cannot read a debtor under User 'B's user ID.
     * @allow (list) User 'A' can list debtors under their own user ID.
     * @deny (list) User 'A' cannot list debtors under User 'B's user ID.
     * @allow (update) User 'A' can update a debtor under their own user ID.
     * @deny (update) User 'A' cannot update a debtor under User 'B's user ID.
     * @allow (delete) User 'A' can delete a debtor under their own user ID.
     * @deny (delete) User 'A' cannot delete a debtor under User 'B's user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/debtors/{debtorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/debts/{debtId} collection.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) User 'A' can create a debt under their own user ID.
     * @deny (create) User 'A' cannot create a debt under User 'B's user ID.
     * @allow (get) User 'A' can read a debt under their own user ID.
     * @deny (get) User 'A' cannot read a debt under User 'B's user ID.
     * @allow (list) User 'A' can list debts under their own user ID.
     * @deny (list) User 'A' cannot list debts under User 'B's user ID.
     * @allow (update) User 'A' can update a debt under their own user ID.
     * @deny (update) User 'A' cannot update a debt under User 'B's user ID.
     * @allow (delete) User 'A' can delete a debt under their own user ID.
     * @deny (delete) User 'A' cannot delete a debt under User 'B's user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/debts/{debtId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/settlements/{settlementId} collection.
     * @path /users/{userId}/settlements/{settlementId}
     * @allow (create) User 'A' can create a settlement under their own user ID.
     * @deny (create) User 'A' cannot create a settlement under User 'B's user ID.
     * @allow (get) User 'A' can read a settlement under their own user ID.
     * @deny (get) User 'A' cannot read a settlement under User 'B's user ID.
     * @allow (list) User 'A' can list settlements under their own user ID.
     * @deny (list) User 'A' cannot list settlements under User 'B's user ID.
     * @allow (update) User 'A' can update a settlement under their own user ID.
     * @deny (update) User 'A' cannot update a settlement under User 'B's user ID.
     * @allow (delete) User 'A' can delete a settlement under their own user ID.
     * @deny (delete) User 'A' cannot delete a settlement under User 'B's user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/settlements/{settlementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}